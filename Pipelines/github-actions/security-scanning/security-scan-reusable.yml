name: Reusable Security Scanning Workflow

on:
  workflow_call:
    inputs:
      scan-level:
        description: 'Security scanning intensity level'
        required: false
        type: string
        default: 'standard'
      target-environment:
        description: 'Target environment for scanning'
        required: false
        type: string
        default: 'staging'
      fail-on-high:
        description: 'Fail pipeline on high severity findings'
        required: false
        type: boolean
        default: true
      fail-on-medium:
        description: 'Fail pipeline on medium severity findings'
        required: false
        type: boolean
        default: false
      scan-containers:
        description: 'Enable container security scanning'
        required: false
        type: boolean
        default: true
      scan-iac:
        description: 'Enable Infrastructure as Code scanning'
        required: false
        type: boolean
        default: true
      upload-sarif:
        description: 'Upload SARIF results to GitHub Security tab'
        required: false
        type: boolean
        default: true
      create-issues:
        description: 'Create GitHub issues for security findings'
        required: false
        type: boolean
        default: true
    secrets:
      AZURE_CLIENT_ID:
        description: 'Azure service principal client ID'
        required: false
      AZURE_TENANT_ID:
        description: 'Azure tenant ID'  
        required: false
      AZURE_CLIENT_SECRET:
        description: 'Azure service principal secret'
        required: false
      SONARQUBE_TOKEN:
        description: 'SonarQube authentication token'
        required: false
      CHECKMARX_USERNAME:
        description: 'Checkmarx username'
        required: false
      CHECKMARX_PASSWORD:
        description: 'Checkmarx password'
        required: false
    outputs:
      security-gate-result:
        description: 'Overall security gate result'
        value: ${{ jobs.security-gate.outputs.result }}
      critical-findings:
        description: 'Number of critical findings'
        value: ${{ jobs.security-gate.outputs.critical-count }}
      high-findings:
        description: 'Number of high findings'
        value: ${{ jobs.security-gate.outputs.high-count }}
      scan-summary:
        description: 'Security scan summary'
        value: ${{ jobs.report.outputs.summary }}

env:
  SECURITY_SCAN_TIMEOUT: 45
  FAIL_ON_CRITICAL: true
  FAIL_ON_HIGH: ${{ inputs.fail-on-high }}
  FAIL_ON_MEDIUM: ${{ inputs.fail-on-medium }}
  SCAN_LEVEL: ${{ inputs.scan-level }}
  TARGET_ENVIRONMENT: ${{ inputs.target-environment }}

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  attestations: write
  issues: write
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      should-scan-containers: ${{ inputs.scan-containers }}
      should-scan-iac: ${{ inputs.scan-iac }}
      should-run-dast: ${{ steps.config.outputs.should-run-dast }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure scan parameters
        id: config
        run: |
          if [[ "${{ inputs.scan-level }}" == "full" && "${{ github.event_name }}" != "pull_request" ]]; then
            echo "should-run-dast=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-dast=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate language matrix
        id: matrix
        run: |
          MATRIX='{"include":[]}'
          
          if [[ -f "package.json" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"language": "javascript", "scanner": "npm-audit,semgrep"}]')
          fi
          
          if [[ -f "requirements.txt" || -f "pyproject.toml" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"language": "python", "scanner": "bandit,safety,semgrep"}]')
          fi
          
          if [[ -f "pom.xml" || -f "build.gradle" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"language": "java", "scanner": "semgrep,spotbugs"}]')
          fi
          
          if [[ -f "go.mod" ]]; then
            MATRIX=$(echo $MATRIX | jq '.include += [{"language": "go", "scanner": "gosec,semgrep"}]')
          fi
          
          if [[ $(echo $MATRIX | jq '.include | length') -eq 0 ]]; then
            MATRIX='{"include":[{"language": "generic", "scanner": "semgrep"}]}'
          fi
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  secrets-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: Upload secret scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-results
          path: |
            gitleaks-report.sarif
            trufflehog-results.json

  sast-scan:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          generateSarif: "1"

      - name: Upload SAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-results-${{ matrix.language }}
          path: |
            *.sarif
            *.json

      - name: Upload SARIF to Security tab
        if: inputs.upload-sarif && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep-${{ matrix.language }}

  dependency-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run GitHub Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'dependency-results.sarif'

      - name: Upload dependency results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: dependency-results.sarif

      - name: Upload dependency SARIF
        if: inputs.upload-sarif && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dependency-results.sarif
          category: dependencies

  iac-scan:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-scan-iac == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform,bicep,arm,kubernetes
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Run TFSec
        if: hashFiles('**/*.tf') != ''
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          format: sarif
          sarif_file: tfsec-results.sarif

      - name: Upload IaC results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iac-scan-results
          path: |
            checkov-results.sarif
            tfsec-results.sarif

      - name: Upload IaC SARIF
        if: inputs.upload-sarif && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif
          category: iac-checkov

  container-scan:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-scan-containers == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          if [[ -f "Dockerfile" ]]; then
            docker build -t scan-target:latest .
          else
            echo "No Dockerfile found, skipping container scan"
            exit 0
          fi

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-target:latest'
          format: 'sarif'
          output: 'container-results.sarif'

      - name: Upload container results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: container-results.sarif

      - name: Upload container SARIF
        if: inputs.upload-sarif && always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: container-results.sarif
          category: containers

  security-gate:
    runs-on: ubuntu-latest
    needs: [secrets-scan, sast-scan, dependency-scan, iac-scan, container-scan]
    if: always()
    outputs:
      result: ${{ steps.evaluate.outputs.result }}
      critical-count: ${{ steps.evaluate.outputs.critical-count }}
      high-count: ${{ steps.evaluate.outputs.high-count }}
    steps:
      - name: Download scan results
        uses: actions/download-artifact@v4
        with:
          path: ./scan-results

      - name: Evaluate security gate
        id: evaluate
        run: |
          GATE_PASSED=true
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          
          # Count findings from SARIF files
          for file in $(find ./scan-results -name "*.sarif" -type f); do
            if command -v jq >/dev/null 2>&1; then
              CRITICAL=$(jq '[.runs[]?.results[]? | select(.level == "error" and (.properties.severity // .properties["security-severity"]) == "critical")] | length' "$file" 2>/dev/null || echo 0)
              HIGH=$(jq '[.runs[]?.results[]? | select(.level == "error" and (.properties.severity // .properties["security-severity"]) == "high")] | length' "$file" 2>/dev/null || echo 0)
              
              CRITICAL_COUNT=$((CRITICAL_COUNT + CRITICAL))
              HIGH_COUNT=$((HIGH_COUNT + HIGH))
            fi
          done
          
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          
          echo "Security findings summary:"
          echo "- Critical: $CRITICAL_COUNT"
          echo "- High: $HIGH_COUNT"
          
          # Apply gate logic
          if [[ "${{ env.FAIL_ON_CRITICAL }}" == "true" ]] && [[ $CRITICAL_COUNT -gt 0 ]]; then
            echo "❌ Security gate FAILED: $CRITICAL_COUNT critical findings"
            GATE_PASSED=false
          fi
          
          if [[ "${{ env.FAIL_ON_HIGH }}" == "true" ]] && [[ $HIGH_COUNT -gt 0 ]]; then
            echo "❌ Security gate FAILED: $HIGH_COUNT high findings"
            GATE_PASSED=false
          fi
          
          if [[ "$GATE_PASSED" == "true" ]]; then
            echo "✅ Security gate PASSED"
            echo "result=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Security gate FAILED" 
            echo "result=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

  create-issues:
    runs-on: ubuntu-latest
    needs: security-gate
    if: |
      inputs.create-issues && 
      needs.security-gate.outputs.result == 'failed' && 
      github.event_name != 'pull_request'
    steps:
      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔒 Security Scan Failure - ${context.repo.repo}`;
            const body = `
            ## Security Scan Results
            
            **Critical Findings**: ${{ needs.security-gate.outputs.critical-count }}
            **High Findings**: ${{ needs.security-gate.outputs.high-count }}
            **Scan Level**: ${{ inputs.scan-level }}
            **Environment**: ${{ inputs.target-environment }}
            
            [View full results](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent']
            });

  report:
    runs-on: ubuntu-latest
    needs: [setup, security-gate]
    if: always()
    outputs:
      summary: ${{ steps.summary.outputs.summary }}
    steps:
      - name: Generate summary
        id: summary
        run: |
          SUMMARY="Security scan completed - Level: ${{ inputs.scan-level }}, Result: ${{ needs.security-gate.outputs.result || 'unknown' }}, Critical: ${{ needs.security-gate.outputs.critical-count || '0' }}, High: ${{ needs.security-gate.outputs.high-count || '0' }}"
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT
          
          # Create job summary
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🔒 Security Scan Summary
          
          | Metric | Value |
          |--------|-------|
          | **Scan Level** | ${{ inputs.scan-level }} |
          | **Target Environment** | ${{ inputs.target-environment }} |
          | **Gate Result** | ${{ needs.security-gate.outputs.result || 'unknown' }} |
          | **Critical Findings** | ${{ needs.security-gate.outputs.critical-count || '0' }} |
          | **High Findings** | ${{ needs.security-gate.outputs.high-count || '0' }} |
          
          ### Scan Coverage
          - ✅ Secret Detection
          - ✅ Static Analysis (SAST)
          - ✅ Dependency Scanning (SCA)
          - ${{ needs.setup.outputs.should-scan-iac == 'true' && '✅' || '❌' }} Infrastructure Analysis
          - ${{ needs.setup.outputs.should-scan-containers == 'true' && '✅' || '❌' }} Container Scanning
          
          EOF

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## 🔒 Security Scan Results
            
            **Gate Result**: ${{ needs.security-gate.outputs.result || 'unknown' }}
            **Critical**: ${{ needs.security-gate.outputs.critical-count || '0' }} | **High**: ${{ needs.security-gate.outputs.high-count || '0' }}
            
            View detailed results in the [Security tab](${context.payload.repository.html_url}/security).
            `;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });