apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: web
    app.kubernetes.io/part-of: myapp-suite
    app.kubernetes.io/managed-by: github-actions
  annotations:
    deployment.kubernetes.io/revision: "1"
    app.kubernetes.io/managed-by: "github-actions"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: myapp
      app.kubernetes.io/name: myapp
  template:
    metadata:
      labels:
        app: myapp
        app.kubernetes.io/name: myapp
        app.kubernetes.io/instance: myapp
        app.kubernetes.io/version: "1.0.0"
        app.kubernetes.io/component: web
        app.kubernetes.io/part-of: myapp-suite
        version: v1
      annotations:
        # Istio service mesh annotations
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/proxyCPU: "100m"
        sidecar.istio.io/proxyMemory: "128Mi"
        # Linkerd service mesh annotations
        linkerd.io/inject: "enabled"
        # Prometheus annotations
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        # Security annotations
        container.apparmor.security.beta.kubernetes.io/app: "runtime/default"
        container.seccomp.security.alpha.kubernetes.io/app: "runtime/default"
    spec:
      # Security: Service account with minimal permissions
      serviceAccountName: myapp
      automountServiceAccountToken: false
      
      # Security: Security context at pod level
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [1001]
      
      # Scheduling preferences
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - myapp
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            preference:
              matchExpressions:
              - key: node.kubernetes.io/instance-type
                operator: In
                values:
                - standard
                - compute
      
      # Tolerations for spot instances (optional)
      tolerations:
      - key: "spot"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      
      # DNS configuration
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"
        - name: edns0
      
      # Init containers for setup tasks
      initContainers:
      - name: init-permissions
        image: busybox:1.35
        command:
        - sh
        - -c
        - |
          echo "Setting up file permissions..."
          chown -R 1001:1001 /app/data
          chmod 755 /app/data
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        securityContext:
          runAsUser: 0
          runAsGroup: 0
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - CHOWN
            - FOWNER
      
      containers:
      - name: app
        image: myapp:latest
        imagePullPolicy: Always
        
        # Security context at container level
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        
        # Container ports
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: http-metrics
          containerPort: 9090
          protocol: TCP
        
        # Environment variables
        env:
        - name: PORT
          value: "8080"
        - name: NODE_ENV
          value: "production"
        - name: LOG_LEVEL
          value: "info"
        - name: METRICS_PORT
          value: "9090"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        
        # Environment variables from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: myapp-config
            optional: true
        - secretRef:
            name: myapp-secrets
            optional: true
        
        # Resource limits and requests
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
            ephemeral-storage: 1Gi
          requests:
            cpu: 100m
            memory: 128Mi
            ephemeral-storage: 256Mi
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
            httpHeaders:
            - name: Custom-Header
              value: liveness
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            httpHeaders:
            - name: Custom-Header
              value: readiness
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 30
        
        # Volume mounts
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: tmp-volume
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
      
      # Sidecar container for logging/monitoring (optional)
      - name: log-forwarder
        image: fluent/fluent-bit:2.1.10
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 50m
            memory: 64Mi
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        - name: app-logs
          mountPath: /app/logs
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
      
      # Volumes
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: myapp-data
      - name: tmp-volume
        emptyDir:
          sizeLimit: 256Mi
      - name: var-cache
        emptyDir:
          sizeLimit: 256Mi
      - name: nginx-cache
        emptyDir:
          sizeLimit: 512Mi
      - name: app-logs
        emptyDir:
          sizeLimit: 1Gi
      - name: config-volume
        configMap:
          name: myapp-config
          defaultMode: 0644
      - name: secrets-volume
        secret:
          secretName: myapp-secrets
          defaultMode: 0600
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
          optional: true
      
      # Image pull secrets
      imagePullSecrets:
      - name: registry-credentials
      
      # Termination grace period
      terminationGracePeriodSeconds: 30
      
      # Restart policy
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: myapp
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
    app.kubernetes.io/component: web
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: http-metrics
    protocol: TCP
  selector:
    app: myapp
    app.kubernetes.io/name: myapp
  sessionAffinity: None

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: myapp
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT:role/myapp-service-role"
    iam.gke.io/gcp-service-account: "myapp@PROJECT.iam.gserviceaccount.com"
automountServiceAccountToken: false

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: myapp-config
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /tmp/nginx.pid;
    
    events {
        worker_connections 1024;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        server {
            listen 8080;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;
            
            location / {
                try_files $uri $uri/ /index.html;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }
  
  app.properties: |
    server.port=8080
    logging.level.root=INFO
    management.endpoints.web.exposure.include=health,info,metrics,prometheus

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myapp-data
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: fast-ssd

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: myapp-pdb
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: myapp
      app.kubernetes.io/name: myapp

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: myapp-hpa
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: myapp
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: myapp-netpol
  namespace: default
  labels:
    app: myapp
    app.kubernetes.io/name: myapp
    app.kubernetes.io/instance: myapp
spec:
  podSelector:
    matchLabels:
      app: myapp
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from ingress controller
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  # Allow traffic from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
  # Allow traffic from same namespace
  - from:
    - podSelector:
        matchLabels:
          app: myapp
    ports:
    - protocol: TCP
      port: 8080
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow HTTPS traffic
  - to: []
    ports:
    - protocol: TCP
      port: 443
  # Allow traffic to database
  - to:
    - namespaceSelector:
        matchLabels:
          name: database
    ports:
    - protocol: TCP
      port: 5432