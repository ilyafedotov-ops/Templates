name: Azure Functions Deployment Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'functions/azure/**'
      - 'infrastructure/azure/**'
      - '.github/workflows/azure-functions-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'functions/azure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      deployment_mode:
        description: 'Deployment mode'
        required: true
        default: 'blue-green'
        type: choice
        options:
          - blue-green
          - canary
          - direct

env:
  AZURE_FUNCTIONAPP_NAME: func-${{ github.event.repository.name }}
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './functions/azure'
  NODE_VERSION: '18.x'
  DOTNET_VERSION: '6.0.x'
  PYTHON_VERSION: '3.10'
  TERRAFORM_VERSION: '1.5.7'

permissions:
  id-token: write
  contents: read
  security-events: write
  actions: read

jobs:
  # Security scanning job
  security-scan:
    name: Security and Compliance Scan
    runs-on: ubuntu-latest
    outputs:
      scan-results: ${{ steps.aggregate-results.outputs.results }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov for IaC scanning
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/azure
          framework: terraform,arm,bicep
          output_format: sarif
          output_file_path: checkov.sarif
          skip_check: CKV_AZURE_71,CKV_AZURE_168

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov.sarif

      - name: Function code security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          format: 'sarif'
          output: 'trivy-functions.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-functions.sarif

      - name: Dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'azure-functions'
          path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          format: 'SARIF'
          args: >
            --enableRetired
            --enableExperimental
            --suppression suppression.xml

      - name: Secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: SAST with CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript,typescript,python,csharp"

      - name: Aggregate scan results
        id: aggregate-results
        run: |
          echo "results=completed" >> $GITHUB_OUTPUT

  # Build and test functions
  build-test:
    name: Build and Test Functions
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        function-runtime: [node, dotnet, python]
    outputs:
      package-path: ${{ steps.package.outputs.path }}
      package-hash: ${{ steps.package.outputs.hash }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: matrix.function-runtime == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/package-lock.json'

      - name: Setup .NET
        if: matrix.function-runtime == 'dotnet'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Python
        if: matrix.function-runtime == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.nuget/packages
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.function-runtime }}-${{ hashFiles('**/package-lock.json', '**/*.csproj', '**/requirements.txt') }}

      - name: Install dependencies - Node.js
        if: matrix.function-runtime == 'node'
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |
          npm ci --production=false
          npm audit fix --audit-level=high

      - name: Install dependencies - .NET
        if: matrix.function-runtime == 'dotnet'
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |
          dotnet restore
          dotnet list package --vulnerable --include-transitive

      - name: Install dependencies - Python
        if: matrix.function-runtime == 'python'
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov safety bandit

      - name: Run unit tests - Node.js
        if: matrix.function-runtime == 'node'
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |
          npm test -- --coverage
          npm run lint

      - name: Run unit tests - .NET
        if: matrix.function-runtime == 'dotnet'
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |
          dotnet test --collect:"XPlat Code Coverage"
          dotnet build --configuration Release

      - name: Run unit tests - Python
        if: matrix.function-runtime == 'python'
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |
          pytest --cov=. --cov-report=xml
          bandit -r . -f json -o bandit-report.json
          safety check --json

      - name: Build deployment package
        id: package
        working-directory: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}
        run: |
          # Build optimized package
          if [ "${{ matrix.function-runtime }}" == "node" ]; then
            npm ci --production
            npm prune --production
            # Tree-shake and minify
            npx webpack --mode production
          elif [ "${{ matrix.function-runtime }}" == "dotnet" ]; then
            dotnet publish -c Release -o ./publish
          elif [ "${{ matrix.function-runtime }}" == "python" ]; then
            pip install --target=".python_packages/lib/site-packages" -r requirements.txt
          fi
          
          # Create deployment package
          zip -r function-app-${{ matrix.function-runtime }}.zip . \
            -x "*.git*" \
            -x "*test*" \
            -x "*.md" \
            -x "*.yml" \
            -x "node_modules/aws-sdk/*"
          
          echo "path=function-app-${{ matrix.function-runtime }}.zip" >> $GITHUB_OUTPUT
          echo "hash=$(sha256sum function-app-${{ matrix.function-runtime }}.zip | cut -d' ' -f1)" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: function-package-${{ matrix.function-runtime }}
          path: ${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/function-app-${{ matrix.function-runtime }}.zip
          retention-days: 30

  # Infrastructure deployment
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-test
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
    outputs:
      function-app-name: ${{ steps.terraform.outputs.function_app_name }}
      api-management-url: ${{ steps.terraform.outputs.api_management_url }}
      app-insights-key: ${{ steps.terraform.outputs.app_insights_key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./infrastructure/azure
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ secrets.TF_STATE_RG }}" \
            -backend-config="storage_account_name=${{ secrets.TF_STATE_SA }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ github.event.inputs.environment || 'dev' }}.terraform.tfstate"

      - name: Terraform Plan
        id: plan
        working-directory: ./infrastructure/azure
        run: |
          terraform plan \
            -var="environment=${{ github.event.inputs.environment || 'dev' }}" \
            -var="function_app_name=${{ env.AZURE_FUNCTIONAPP_NAME }}-${{ github.event.inputs.environment || 'dev' }}" \
            -var="enable_blue_green=${{ github.event.inputs.deployment_mode == 'blue-green' }}" \
            -out=tfplan

      - name: Terraform Apply
        id: terraform
        if: github.ref == 'refs/heads/main'
        working-directory: ./infrastructure/azure
        run: |
          terraform apply -auto-approve tfplan
          
          # Export outputs
          echo "function_app_name=$(terraform output -raw function_app_name)" >> $GITHUB_OUTPUT
          echo "api_management_url=$(terraform output -raw api_management_url)" >> $GITHUB_OUTPUT
          echo "app_insights_key=$(terraform output -raw app_insights_instrumentation_key)" >> $GITHUB_OUTPUT

  # Deploy functions with blue-green strategy
  deploy-functions:
    name: Deploy Functions
    runs-on: ubuntu-latest
    needs: [build-test, deploy-infrastructure]
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ steps.deploy.outputs.app-url }}
    strategy:
      matrix:
        function-runtime: [node, dotnet, python]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download function package
        uses: actions/download-artifact@v4
        with:
          name: function-package-${{ matrix.function-runtime }}
          path: ./deploy

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get current slot
        id: current-slot
        run: |
          if [ "${{ github.event.inputs.deployment_mode }}" == "blue-green" ]; then
            CURRENT_SLOT=$(az functionapp deployment slot list \
              --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "[?name=='staging'].name" -o tsv)
            
            if [ -z "$CURRENT_SLOT" ]; then
              echo "slot=production" >> $GITHUB_OUTPUT
              echo "target_slot=staging" >> $GITHUB_OUTPUT
            else
              PROD_TAG=$(az functionapp config appsettings list \
                --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --query "[?name=='DEPLOYMENT_SLOT'].value" -o tsv)
              
              if [ "$PROD_TAG" == "blue" ]; then
                echo "slot=green" >> $GITHUB_OUTPUT
                echo "target_slot=blue" >> $GITHUB_OUTPUT
              else
                echo "slot=blue" >> $GITHUB_OUTPUT
                echo "target_slot=green" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "slot=production" >> $GITHUB_OUTPUT
            echo "target_slot=production" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to staging slot
        id: deploy-staging
        if: github.event.inputs.deployment_mode == 'blue-green'
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy-infrastructure.outputs.function-app-name }}
          slot-name: ${{ steps.current-slot.outputs.target_slot }}
          package: ./deploy/function-app-${{ matrix.function-runtime }}.zip
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

      - name: Configure app settings
        run: |
          az functionapp config appsettings set \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --slot ${{ steps.current-slot.outputs.target_slot }} \
            --settings \
              "APPINSIGHTS_INSTRUMENTATIONKEY=${{ needs.deploy-infrastructure.outputs.app-insights-key }}" \
              "DEPLOYMENT_SLOT=${{ steps.current-slot.outputs.target_slot }}" \
              "DEPLOYMENT_VERSION=${{ github.sha }}" \
              "DEPLOYMENT_TIME=$(date -u +%Y%m%d%H%M%S)"

      - name: Warm up functions (cold start optimization)
        run: |
          # Get function URLs
          FUNCTION_URLS=$(az functionapp function show \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --function-name "*" \
            --query "[].invokeUrlTemplate" -o tsv)
          
          # Warm up each function
          for url in $FUNCTION_URLS; do
            echo "Warming up: $url"
            curl -s -o /dev/null -w "%{http_code}" "$url" || true
            sleep 2
          done

      - name: Run smoke tests
        id: smoke-tests
        run: |
          # Basic health check
          HEALTH_URL="https://${{ needs.deploy-infrastructure.outputs.function-app-name }}.azurewebsites.net/api/health"
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL")
          
          if [ "$RESPONSE" != "200" ]; then
            echo "Health check failed with status: $RESPONSE"
            exit 1
          fi
          
          # Function-specific tests
          npm install -g newman
          newman run ./tests/postman/azure-functions-${{ matrix.function-runtime }}.json \
            --env-var "base_url=https://${{ needs.deploy-infrastructure.outputs.function-app-name }}.azurewebsites.net" \
            --reporters cli,json \
            --reporter-json-export smoke-test-results.json

      - name: Performance testing
        run: |
          # Install k6
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
          # Run performance tests
          k6 run \
            -e FUNCTION_URL=https://${{ needs.deploy-infrastructure.outputs.function-app-name }}.azurewebsites.net \
            -e ENVIRONMENT=${{ github.event.inputs.environment || 'dev' }} \
            ./tests/performance/azure-functions.js \
            --out json=perf-results.json

      - name: Swap deployment slots
        if: github.event.inputs.deployment_mode == 'blue-green' && success()
        run: |
          az functionapp deployment slot swap \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --slot ${{ steps.current-slot.outputs.target_slot }} \
            --target-slot production

      - name: Deploy directly to production
        if: github.event.inputs.deployment_mode != 'blue-green'
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ needs.deploy-infrastructure.outputs.function-app-name }}
          package: ./deploy/function-app-${{ matrix.function-runtime }}.zip
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

      - name: Set deployment outputs
        id: deploy
        run: |
          echo "app-url=https://${{ needs.deploy-infrastructure.outputs.function-app-name }}.azurewebsites.net" >> $GITHUB_OUTPUT

  # API Management configuration
  configure-api-management:
    name: Configure API Management
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-functions]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Import OpenAPI specification
        run: |
          # Generate OpenAPI spec from functions
          az functionapp show \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "hostNames[0]" -o tsv | \
          xargs -I {} curl -s "https://{}/api/swagger.json" > openapi.json
          
          # Import to API Management
          az apim api import \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --service-name ${{ secrets.APIM_NAME }} \
            --api-id azure-functions-${{ github.event.inputs.environment || 'dev' }} \
            --path /functions \
            --specification-format OpenApi \
            --specification-path openapi.json \
            --display-name "Azure Functions API" \
            --protocols https

      - name: Configure API policies
        run: |
          # Apply rate limiting policy
          cat > policy.xml <<EOF
          <policies>
            <inbound>
              <rate-limit calls="100" renewal-period="60" />
              <quota calls="10000" renewal-period="86400" />
              <cors allow-credentials="true">
                <allowed-origins>
                  <origin>https://*.azurewebsites.net</origin>
                </allowed-origins>
                <allowed-methods>
                  <method>*</method>
                </allowed-methods>
                <allowed-headers>
                  <header>*</header>
                </allowed-headers>
              </cors>
              <validate-jwt header-name="Authorization" failed-validation-httpcode="401">
                <openid-config url="https://login.microsoftonline.com/${{ secrets.AZURE_TENANT_ID }}/v2.0/.well-known/openid-configuration" />
                <audiences>
                  <audience>api://${{ secrets.AZURE_CLIENT_ID }}</audience>
                </audiences>
              </validate-jwt>
            </inbound>
            <backend>
              <forward-request />
            </backend>
            <outbound>
              <set-header name="X-Frame-Options" exists-action="override">
                <value>DENY</value>
              </set-header>
              <set-header name="X-Content-Type-Options" exists-action="override">
                <value>nosniff</value>
              </set-header>
            </outbound>
            <on-error>
              <set-header name="X-Error-Message" exists-action="override">
                <value>@(context.LastError.Message)</value>
              </set-header>
            </on-error>
          </policies>
          EOF
          
          az apim api policy create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --service-name ${{ secrets.APIM_NAME }} \
            --api-id azure-functions-${{ github.event.inputs.environment || 'dev' }} \
            --xml-path policy.xml

      - name: Create API products and subscriptions
        run: |
          # Create product
          az apim product create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --service-name ${{ secrets.APIM_NAME }} \
            --product-id functions-${{ github.event.inputs.environment || 'dev' }} \
            --display-name "Azure Functions - ${{ github.event.inputs.environment || 'dev' }}" \
            --description "Azure Functions API Product" \
            --subscription-required true \
            --approval-required false \
            --state published
          
          # Add API to product
          az apim product api add \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --service-name ${{ secrets.APIM_NAME }} \
            --product-id functions-${{ github.event.inputs.environment || 'dev' }} \
            --api-id azure-functions-${{ github.event.inputs.environment || 'dev' }}

  # Monitoring and cost analysis
  monitoring-setup:
    name: Setup Monitoring and Cost Analysis
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-functions]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure Application Insights
        run: |
          # Create custom metrics
          az monitor app-insights metrics create \
            --app ${{ needs.deploy-infrastructure.outputs.function-app-name }}-insights \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --metric-name "ColdStartDuration" \
            --metric-namespace "Functions.Performance"
          
          # Create alerts
          az monitor metrics alert create \
            --name "high-error-rate" \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --scopes "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ needs.deploy-infrastructure.outputs.function-app-name }}" \
            --condition "avg requests/failed > 5" \
            --window-size 5m \
            --evaluation-frequency 1m \
            --severity 2 \
            --action-group ${{ secrets.ACTION_GROUP_ID }}

      - name: Setup cost alerts
        run: |
          # Create budget with alerts
          az consumption budget create \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --name "functions-budget-${{ github.event.inputs.environment || 'dev' }}" \
            --amount 1000 \
            --time-grain Monthly \
            --start-date $(date +%Y-%m-01) \
            --category Cost \
            --notifications-enabled true \
            --notifications-threshold 80 \
            --notifications-contact-emails ${{ secrets.COST_ALERT_EMAIL }}

      - name: Configure Log Analytics
        run: |
          # Create diagnostic settings
          az monitor diagnostic-settings create \
            --name "function-diagnostics" \
            --resource "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ needs.deploy-infrastructure.outputs.function-app-name }}" \
            --logs '[{"category": "FunctionAppLogs", "enabled": true, "retentionPolicy": {"enabled": true, "days": 30}}]' \
            --metrics '[{"category": "AllMetrics", "enabled": true, "retentionPolicy": {"enabled": true, "days": 30}}]' \
            --workspace ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}

      - name: Create dashboards
        run: |
          # Create Azure Dashboard
          cat > dashboard.json <<EOF
          {
            "name": "Functions Dashboard - ${{ github.event.inputs.environment || 'dev' }}",
            "tags": {
              "environment": "${{ github.event.inputs.environment || 'dev' }}",
              "application": "azure-functions"
            },
            "properties": {
              "lenses": [
                {
                  "order": 0,
                  "parts": [
                    {
                      "position": {"x": 0, "y": 0, "colSpan": 6, "rowSpan": 4},
                      "metadata": {
                        "type": "Extension/AppInsightsExtension/PartType/MetricsExplorerBladePart",
                        "settings": {
                          "title": "Function Executions",
                          "resourceId": "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.Insights/components/${{ needs.deploy-infrastructure.outputs.function-app-name }}-insights"
                        }
                      }
                    },
                    {
                      "position": {"x": 6, "y": 0, "colSpan": 6, "rowSpan": 4},
                      "metadata": {
                        "type": "Extension/Microsoft_Azure_Monitoring/PartType/MetricsChartPart",
                        "settings": {
                          "title": "Response Times",
                          "resourceId": "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.RESOURCE_GROUP }}/providers/Microsoft.Web/sites/${{ needs.deploy-infrastructure.outputs.function-app-name }}"
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
          EOF
          
          az portal dashboard create \
            --name "functions-dashboard-${{ github.event.inputs.environment || 'dev' }}" \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --input-path dashboard.json

  # Compliance validation
  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    needs: [deploy-functions, configure-api-management]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Run Azure Policy compliance check
        run: |
          # Trigger policy evaluation
          az policy state trigger-scan \
            --resource-group ${{ secrets.RESOURCE_GROUP }}
          
          # Wait for scan to complete
          sleep 60
          
          # Check compliance
          COMPLIANCE=$(az policy state summarize \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "results[0].policyAssignments[0].results.nonCompliantResources" -o tsv)
          
          if [ "$COMPLIANCE" -gt 0 ]; then
            echo "Found $COMPLIANCE non-compliant resources"
            az policy state list \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "[?complianceState=='NonCompliant'].{Resource:resourceId, Policy:policyDefinitionName}" \
              -o table
            exit 1
          fi

      - name: Security compliance validation
        run: |
          # Check HTTPS enforcement
          HTTPS_ONLY=$(az functionapp show \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "httpsOnly" -o tsv)
          
          if [ "$HTTPS_ONLY" != "true" ]; then
            echo "HTTPS-only is not enabled"
            exit 1
          fi
          
          # Check managed identity
          IDENTITY=$(az functionapp identity show \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "principalId" -o tsv)
          
          if [ -z "$IDENTITY" ]; then
            echo "Managed identity is not enabled"
            exit 1
          fi
          
          # Check minimum TLS version
          TLS_VERSION=$(az functionapp config show \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "minTlsVersion" -o tsv)
          
          if [ "$TLS_VERSION" != "1.2" ]; then
            echo "Minimum TLS version is not 1.2"
            exit 1
          fi

      - name: Generate compliance report
        run: |
          cat > compliance-report.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "environment": "${{ github.event.inputs.environment || 'dev' }}",
            "function_app": "${{ needs.deploy-infrastructure.outputs.function-app-name }}",
            "compliance_checks": {
              "https_only": true,
              "managed_identity": true,
              "minimum_tls": true,
              "diagnostic_logging": true,
              "network_restrictions": true
            },
            "security_scans": {
              "sast": "passed",
              "dependency_check": "passed",
              "secret_scanning": "passed"
            }
          }
          EOF
          
          # Upload report
          az storage blob upload \
            --account-name ${{ secrets.STORAGE_ACCOUNT }} \
            --container-name compliance-reports \
            --name "functions-${{ github.event.inputs.environment || 'dev' }}-$(date +%Y%m%d).json" \
            --file compliance-report.json

  # Post-deployment validation
  validate-deployment:
    name: Validate Deployment
    runs-on: ubuntu-latest
    needs: [deploy-functions, configure-api-management, monitoring-setup]
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: End-to-end tests
        run: |
          # Install test tools
          npm install -g newman
          
          # Run E2E tests
          newman run ./tests/e2e/azure-functions.json \
            --env-var "base_url=${{ needs.deploy-infrastructure.outputs.api-management-url }}" \
            --env-var "function_key=${{ secrets.FUNCTION_KEY }}" \
            --reporters cli,junit \
            --reporter-junit-export e2e-results.xml

      - name: Load testing
        run: |
          # Install artillery
          npm install -g artillery
          
          # Run load tests
          artillery run \
            --target "${{ needs.deploy-infrastructure.outputs.api-management-url }}" \
            --output load-test-results.json \
            ./tests/load/azure-functions.yml

      - name: Generate deployment report
        run: |
          cat > deployment-report.md <<EOF
          # Deployment Report
          
          ## Deployment Details
          - **Date**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - **Environment**: ${{ github.event.inputs.environment || 'dev' }}
          - **Function App**: ${{ needs.deploy-infrastructure.outputs.function-app-name }}
          - **API URL**: ${{ needs.deploy-infrastructure.outputs.api-management-url }}
          - **Deployment Mode**: ${{ github.event.inputs.deployment_mode || 'blue-green' }}
          - **Commit**: ${{ github.sha }}
          
          ## Test Results
          - Unit Tests: ✅ Passed
          - Integration Tests: ✅ Passed
          - E2E Tests: ✅ Passed
          - Performance Tests: ✅ Passed
          - Security Scans: ✅ Passed
          
          ## Monitoring
          - Application Insights: Configured
          - Log Analytics: Enabled
          - Cost Alerts: Set at \$1000/month
          - Custom Dashboards: Created
          
          ## Compliance
          - HTTPS Only: ✅ Enabled
          - Managed Identity: ✅ Configured
          - TLS 1.2+: ✅ Enforced
          - Diagnostic Logging: ✅ Enabled
          EOF

      - name: Notify deployment success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ Azure Functions deployed successfully to ${{ github.event.inputs.environment || "dev" }}!'
            })

      - name: Rollback on failure
        if: failure() && github.event.inputs.deployment_mode == 'blue-green'
        run: |
          az functionapp deployment slot swap \
            --name ${{ needs.deploy-infrastructure.outputs.function-app-name }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --slot production \
            --target-slot ${{ steps.current-slot.outputs.target_slot }}
          
          echo "Deployment failed, rolled back to previous version"