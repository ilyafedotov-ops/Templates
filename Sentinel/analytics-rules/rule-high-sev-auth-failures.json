{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "2.0.0.0",
  "metadata": {
    "title": "Advanced Authentication Threat Detection",
    "description": "Enterprise-grade authentication failure detection with MITRE ATT&CK mapping, statistical anomaly detection, and automated threat response",
    "author": "Enterprise Security Team", 
    "version": "2.0.0",
    "lastModified": "2025-01-01T00:00:00Z",
    "compliance": ["ISO27001:A.9.4.2", "SOC2:CC6.1", "NIST:AC-7"],
    "mitreAttack": {
      "techniques": ["T1110", "T1110.001", "T1110.003", "T1110.004"],
      "tactics": ["Credential Access"],
      "subTechniques": ["Brute Force: Password Guessing", "Brute Force: Password Spraying", "Brute Force: Credential Stuffing"]
    },
    "dataConnectors": ["AzureActiveDirectory", "AzureActiveDirectoryIdentityProtection"],
    "queryFrequency": "PT5M",
    "queryPeriod": "PT1H",
    "alertRuleTemplateName": "advanced-auth-threat-detection"
  },
  "parameters": {
    "workspaceName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Log Analytics workspace"
      }
    },
    "ruleId": {
      "type": "string", 
      "defaultValue": "adv-auth-threat-detection",
      "metadata": {
        "description": "Unique identifier for the analytics rule"
      }
    },
    "severityThreshold": {
      "type": "string",
      "defaultValue": "High",
      "allowedValues": ["Low", "Medium", "High", "Critical"],
      "metadata": {
        "description": "Minimum severity level for alert generation"
      }
    },
    "baselineThresholdMultiplier": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 2,
      "maxValue": 20,
      "metadata": {
        "description": "Multiplier for dynamic baseline threshold (2-20x normal activity)"
      }
    }
  },
  "variables": {
    "alertRuleName": "[concat('Advanced Authentication Threat Detection - ', parameters('ruleId'))]",
    "alertRuleDescription": "Detects sophisticated authentication attacks including brute force, password spraying, credential stuffing, and anomalous authentication patterns using machine learning and statistical analysis"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "apiVersion": "2023-02-01-preview",
      "name": "[format('{0}/Microsoft.SecurityInsights/{1}', parameters('workspaceName'), parameters('ruleId'))]",
      "properties": {
        "displayName": "[variables('alertRuleName')]",
        "description": "[variables('alertRuleDescription')]",
        "enabled": true,
        "kind": "Scheduled",
        "severity": "[parameters('severityThreshold')]",
        "queryFrequency": "PT5M",
        "queryPeriod": "PT1H",
        "triggerOperator": "GreaterThan",
        "triggerThreshold": 0,
        "suppressionDuration": "PT30M",
        "suppressionEnabled": true,
        "tactics": ["CredentialAccess"],
        "techniques": ["T1110"],
        "subTechniques": ["T1110.001", "T1110.003", "T1110.004"],
        "query": "let lookbackPeriod = 7d;\nlet analysisWindow = 1h;\nlet baselineMultiplier = toint('[parameters('baselineThresholdMultiplier')]');\nlet minThreshold = 50;\n// Establish dynamic baseline for normal authentication patterns\nlet authBaseline = \n    SigninLogs\n    | where TimeGenerated between (ago(lookbackPeriod) .. ago(analysisWindow))\n    | where ResultType != 0  // Failed authentications\n    | extend Hour = hourofday(TimeGenerated)\n    | summarize \n        BaselineFailures = avg(todouble(1)),\n        StdDev = stdev(todouble(1))\n        by bin(TimeGenerated, 1h), UserPrincipalName, AppDisplayName, IPAddress\n    | summarize \n        AvgHourlyFailures = avg(BaselineFailures),\n        AvgStdDev = avg(StdDev)\n        by UserPrincipalName, AppDisplayName, IPAddress;\n// Advanced authentication failure analysis\nlet authFailureAnalysis = \n    SigninLogs\n    | where TimeGenerated >= ago(analysisWindow)\n    | where ResultType != 0  // Failed authentication attempts\n    | extend \n        // Enhanced geographic and network analysis\n        Location = strcat(coalesce(LocationDetails.countryOrRegion, \"Unknown\"), \"-\", coalesce(LocationDetails.city, \"Unknown\")),\n        NetworkDetails = strcat(coalesce(NetworkLocationDetails.networkType, \"Unknown\"), \":\", coalesce(tostring(NetworkLocationDetails.networkNames), \"Unknown\")),\n        \n        // Risk indicators\n        IsHighRiskSignin = RiskLevelDuringSignIn in (\"high\", \"medium\"),\n        IsAnonymousProxy = NetworkLocationDetails.networkType == \"anonymousProxy\",\n        IsTor = NetworkLocationDetails.networkType == \"tor\",\n        IsUnfamiliarFeatures = RiskEventTypes has \"unfamiliarFeatures\",\n        \n        // Authentication method analysis\n        AuthMethod = case(\n            AuthenticationMethodsUsed has \"Password\", \"Password\",\n            AuthenticationMethodsUsed has \"SMS\", \"SMS_MFA\",\n            AuthenticationMethodsUsed has \"PhoneApp\", \"App_MFA\",\n            AuthenticationMethodsUsed has \"Certificate\", \"Certificate\",\n            \"Other\"\n        ),\n        \n        // Device analysis\n        DeviceInfo = strcat(coalesce(DeviceDetail.deviceId, \"Unknown\"), \":\", coalesce(DeviceDetail.operatingSystem, \"Unknown\")),\n        IsNewDevice = DeviceDetail.isCompliant != true or isempty(DeviceDetail.deviceId),\n        \n        // Application risk scoring\n        AppRiskScore = case(\n            AppDisplayName in (\"Microsoft Azure PowerShell\", \"Azure CLI\", \"Microsoft Graph PowerShell\"), 4,\n            AppDisplayName contains \"Admin\" or AppDisplayName contains \"Management\", 3,\n            AppDisplayName in (\"Office 365\", \"Outlook\", \"SharePoint\"), 2,\n            1\n        )\n    | extend \n        // Comprehensive risk calculation\n        ThreatScore = \n            (case(IsHighRiskSignin, 20, 0)) +\n            (case(IsAnonymousProxy or IsTor, 25, 0)) +\n            (case(IsUnfamiliarFeatures, 15, 0)) +\n            (case(IsNewDevice, 10, 0)) +\n            (AppRiskScore * 5) +\n            (case(AuthMethod == \"Password\", 10, AuthMethod == \"SMS_MFA\", 5, 0));\n// Pattern detection and statistical analysis\nlet patternAnalysis = \n    authFailureAnalysis\n    | summarize \n        // Volume metrics\n        FailureCount = count(),\n        UniqueIPs = dcount(IPAddress),\n        UniqueUserAgents = dcount(UserAgent),\n        UniqueLocations = dcount(Location),\n        UniqueApps = dcount(AppDisplayName),\n        \n        // Attack pattern indicators\n        PasswordSprayIndicator = case(dcount(UserPrincipalName) > 10 and dcount(IPAddress) <= 5, true, false),\n        BruteForceIndicator = case(dcount(UserPrincipalName) <= 3 and count() > 100, true, false),\n        CredentialStuffingIndicator = case(dcount(UserPrincipalName) > 5 and dcount(IPAddress) > 10, true, false),\n        \n        // Geographic dispersion analysis\n        GeographicAnomalyScore = case(\n            dcount(Location) == 1, 0,\n            dcount(Location) <= 3, 5,\n            dcount(Location) <= 10, 15,\n            25\n        ),\n        \n        // Timing analysis\n        TimeSpan = datetime_diff('minute', max(TimeGenerated), min(TimeGenerated)),\n        AttackVelocity = count() * 1.0 / (datetime_diff('minute', max(TimeGenerated), min(TimeGenerated)) + 1),\n        \n        // Risk aggregation\n        MaxThreatScore = max(ThreatScore),\n        AvgThreatScore = avg(ThreatScore),\n        \n        // Network and device intelligence\n        HighRiskNetworks = countif(IsAnonymousProxy or IsTor),\n        UnknownDevices = countif(IsNewDevice),\n        \n        // Application targeting\n        HighValueTargets = countif(AppRiskScore >= 3),\n        \n        // Evidence collection\n        FailureReasons = make_set(ResultDescription, 10),\n        AttackedUsers = make_set(UserPrincipalName, 100),\n        SourceIPs = make_set(IPAddress, 50),\n        UserAgents = make_set(UserAgent, 20),\n        TargetedApps = make_set(AppDisplayName, 20),\n        Countries = make_set(Location, 20)\n        \n        by bin(TimeGenerated, 5m), IPAddress, UserPrincipalName\n    | extend \n        // Attack pattern classification\n        AttackPattern = case(\n            PasswordSprayIndicator, \"Password Spray\",\n            BruteForceIndicator, \"Brute Force\", \n            CredentialStuffingIndicator, \"Credential Stuffing\",\n            FailureCount > 20 and UniqueIPs <= 2, \"Targeted Brute Force\",\n            FailureCount > 10 and GeographicAnomalyScore > 15, \"Distributed Attack\",\n            \"Suspicious Authentication Pattern\"\n        ),\n        \n        // Final risk assessment\n        FinalRiskScore = \n            (FailureCount * 0.5) +\n            (UniqueIPs * 2) +\n            (GeographicAnomalyScore) +\n            (AvgThreatScore * 0.8) +\n            (AttackVelocity * 3) +\n            (case(HighRiskNetworks > 0, 20, 0)) +\n            (case(HighValueTargets > 0, 15, 0))\n    | where FinalRiskScore > 50 or FailureCount >= minThreshold;\n// Join with baseline for anomaly detection\npatternAnalysis\n| join kind=leftouter (\n    authBaseline\n) on UserPrincipalName, IPAddress\n| extend \n    IsAnomalousVolume = case(\n        isnotnull(AvgHourlyFailures) and FailureCount > (AvgHourlyFailures * baselineMultiplier), true,\n        FailureCount >= minThreshold, true,\n        false\n    ),\n    BaselineComparison = case(\n        isnotnull(AvgHourlyFailures), \n        strcat(\"Current: \", FailureCount, \", Baseline: \", round(AvgHourlyFailures, 1), \", Multiplier: \", round(FailureCount / AvgHourlyFailures, 1)),\n        \"No baseline available\"\n    )\n| where IsAnomalousVolume or FinalRiskScore > 75\n| extend \n    // MITRE ATT&CK technique mapping\n    MitreTechnique = case(\n        AttackPattern == \"Password Spray\", \"T1110.003\",\n        AttackPattern == \"Brute Force\", \"T1110.001\", \n        AttackPattern == \"Credential Stuffing\", \"T1110.004\",\n        \"T1110\"\n    ),\n    MitreTactic = \"Credential Access\",\n    \n    // Incident severity calculation\n    IncidentSeverity = case(\n        FinalRiskScore >= 90 or (HighValueTargets > 0 and FailureCount > 100), \"Critical\",\n        FinalRiskScore >= 75 or (HighRiskNetworks > 0 and FailureCount > 50), \"High\",\n        FinalRiskScore >= 60 or FailureCount > 25, \"Medium\",\n        \"Low\"\n    ),\n    \n    // Response recommendations\n    RecommendedActions = case(\n        HighRiskNetworks > 0, \"Block suspicious IP ranges, Enable Conditional Access policies\",\n        PasswordSprayIndicator, \"Review password policies, Enable MFA for targeted accounts\", \n        BruteForceIndicator, \"Lockout affected accounts, Investigate source IPs\",\n        \"Monitor activity, Review authentication logs\"\n    )\n| project \n    TimeGenerated,\n    AttackPattern,\n    IncidentSeverity,\n    FinalRiskScore,\n    FailureCount,\n    UniqueIPs,\n    UniqueUserAgents,\n    AttackVelocity = round(AttackVelocity, 2),\n    BaselineComparison,\n    MitreTechnique,\n    MitreTactic,\n    RecommendedActions,\n    // Evidence for investigation\n    AttackedUsers,\n    SourceIPs,\n    Countries,\n    TargetedApps,\n    FailureReasons,\n    UserAgents,\n    // Risk indicators\n    HighRiskNetworks,\n    HighValueTargets,\n    UnknownDevices\n| order by FinalRiskScore desc, FailureCount desc",
        "entityMappings": [
          {
            "entityType": "Account",
            "fieldMappings": [
              {
                "columnName": "AttackedUsers",
                "identifier": "Name"
              }
            ]
          },
          {
            "entityType": "IP",
            "fieldMappings": [
              {
                "columnName": "SourceIPs", 
                "identifier": "Address"
              }
            ]
          }
        ],
        "alertDetailsOverride": {
          "alertDisplayNameFormat": "{{AttackPattern}} detected with risk score {{FinalRiskScore}} - {{FailureCount}} failures from {{UniqueIPs}} IP(s)",
          "alertDescriptionFormat": "Advanced authentication threat detected: {{AttackPattern}}\\n\\nRisk Assessment:\\n- Final Risk Score: {{FinalRiskScore}}\\n- Failure Count: {{FailureCount}}\\n- Unique IPs: {{UniqueIPs}}\\n- Attack Velocity: {{AttackVelocity}} failures/min\\n- MITRE Technique: {{MitreTechnique}}\\n\\nRecommended Actions: {{RecommendedActions}}\\n\\nTargeted Users: {{AttackedUsers}}\\nSource IPs: {{SourceIPs}}\\nCountries: {{Countries}}",
          "alertSeverityColumnName": "IncidentSeverity",
          "alertDynamicProperties": [
            {
              "alertProperty": "AlertLink",
              "value": "AttackPattern"
            },
            {
              "alertProperty": "ProviderName", 
              "value": "Advanced Auth Detection"
            },
            {
              "alertProperty": "RemediationSteps",
              "value": "RecommendedActions"
            }
          ]
        },
        "customDetails": {
          "AttackPattern": "AttackPattern",
          "RiskScore": "FinalRiskScore", 
          "MitreTechnique": "MitreTechnique",
          "BaselineComparison": "BaselineComparison",
          "AttackVelocity": "AttackVelocity",
          "HighRiskNetworks": "HighRiskNetworks",
          "HighValueTargets": "HighValueTargets"
        },
        "eventGroupingSettings": {
          "aggregationKind": "AlertPerResult"
        },
        "incidentConfiguration": {
          "createIncident": true,
          "groupingConfiguration": {
            "enabled": true,
            "reopenClosedIncident": false,
            "lookbackDuration": "PT6H",
            "matchingMethod": "AllEntities",
            "groupByEntities": ["Account", "IP"],
            "groupByAlertDetails": ["DisplayName"],
            "groupByCustomDetails": ["AttackPattern"]
          }
        }
      }
    }
  ],
  "outputs": {
    "alertRuleId": {
      "type": "string",
      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/providers/alertRules', parameters('workspaceName'), 'Microsoft.SecurityInsights', parameters('ruleId'))]"
    },
    "alertRuleName": {
      "type": "string", 
      "value": "[variables('alertRuleName')]"
    }
  }
}

